- minikube start --driver=docker

- minikube config set driver docker

- docker context use default

- kubectl create deployment first-app --image=sakib75/first_kube_app //use remote image.

- kubectl get deployments

- kubectl delete deployment first-app

- kubectl expose deployment first-app --type=LoadBalancer --port=8080

- kubectl get services

- minikube service first-app //run the app

- kubectl delete -n default service first-app

- kubectl set image deployment/first-app  first-kube-app-z2gs6
=sakib75/first_kube_app

- kubectl rollout status deployment/first-app  //update process for the "first-app" deployment in Kubernetes has completed successfully.

- kubectl rollout undo deployment/first-app //undo the the latest deployment

- kubectl rollout history deployment/first-app --revision=1 //details

- kubectl rollout history deployment/first-app --to-revision=1 //back to revision 1

- kubectl delete -f deployment.yaml

- kubectl apply -f deployment.yaml

- --- //separator

- kubectl get nodes

- kubectl get rc // replication controller

- kubectl get sc //storage class

- kubectl get pv //persistant volume

- kubectl get nodes -v=10 //look for the errors.

- kubectl exec -it pod/nodehelloworld.example.com -- sh //run shell inside a pod

/* example on run shell

/etc # cat resolv.conf
nameserver 10.96.0.10
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5

*/

- kubectl get all --all-namespaces

- kubectl create namespace critical-app

- kubectl run -it --image=tutum/curl client --namespace critical-app --restart=Never


- kubectl get pods -o wide 

- kubectl get pods --selector app=App1

- kubectl get pods --selector env=dev --no headers | wc -l  // number of dev pods. wc -> word count

- kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml

- kubectl scale --replicas=6 -f replicaset.yaml  //file

- kubectl scale --replicas=6 replicaset my-replicaset // type and name

- kubectl delete  replicaset my-replicaset

- kubectl describe replicaset my-replicaset

- kubectl edit rs my-replicaset

- kubectl taint nodes node-name key=value:taint-effect //NoSchedule | PreferNoSchedule | NoExecute


- kubectl taint nodes node1 app=myapp:NoSchedule
 /*
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "myapp"
    effect: "NoSchedule"
*/

- kubectl label nodes <node-name> <label-key>=<label-value> 
- kubectl label nodes node-1 size=Large 

- kubectl top node //cpu and memory consuption

- kubectl top pod

- kubectl get cm  // configmap

- kubectl drain node1 //unscheduled

- kubectl cordon node1 // doesn't move the pods like drain

- kubectl uncordon node1

- alias k=kubectl

- kubectl get nodes | grep Taints

- kubectl explain pod

- kubectl explain pod.spec





